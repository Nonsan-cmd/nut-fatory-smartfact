import streamlit as st
from sqlalchemy import create_engine, text
import pandas as pd
from datetime import date, datetime
import requests

# -------------------------------
# CONFIG
# -------------------------------
st.set_page_config(page_title="Production Record", page_icon="üè≠", layout="wide")

# Connect Supabase Postgres
conn_str = st.secrets["postgres"]["conn_str"]
engine = create_engine(conn_str)

# -------------------------------
# Login system (‡∏á‡πà‡∏≤‡∏¢ ‡πÜ)
# -------------------------------
if "user" not in st.session_state:
    with st.form("login"):
        st.write("üîê Login")
        user = st.text_input("Username")
        pw = st.text_input("Password", type="password")
        submitted = st.form_submit_button("Login")
        if submitted:
            # TODO: validate from supabase user table
            if user and pw:  
                st.session_state.user = user
                st.success(f"‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö {user}")
            else:
                st.error("‚ùå Username / Password ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
    st.stop()

operator = st.session_state.user

# -------------------------------
# Load master data
# -------------------------------
def load_master(table):
    try:
        return pd.read_sql(f"select * from {table}", engine)
    except:
        return pd.DataFrame()

df_dept = load_master("department_master")
df_machine = load_master("machine_list")
df_part = load_master("part_master")
df_downtime = load_master("downtime_master")
df_problem = load_master("problem_master")

# -------------------------------
# UI Form
# -------------------------------
st.title("üìë Production Record (All-in-one)")

with st.form("record_form", clear_on_submit=True):
    log_date = st.date_input("üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô", value=date.today())
    shift = st.selectbox("üïí ‡∏Å‡∏∞", ["‡πÄ‡∏ä‡πâ‡∏≤", "‡πÇ‡∏≠‡∏ó‡∏µ‡πÄ‡∏ä‡πâ‡∏≤", "‡∏î‡∏∂‡∏Å", "‡πÇ‡∏≠‡∏ó‡∏µ‡∏Å‡∏∞‡∏î‡∏∂‡∏Å"])

    department = st.selectbox("üè≠ ‡πÅ‡∏ú‡∏ô‡∏Å", df_dept["department_name"].unique() if not df_dept.empty else ["FM","TP","FI"])
    
    machine_name = st.selectbox("‚öôÔ∏è ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£", 
        df_machine[df_machine["department"]==department]["machine_name"].unique() if not df_machine.empty else [])
    
    part_no = st.selectbox("üî© Part No.", df_part["part_no"].unique() if not df_part.empty else [])
    
    output_qty = st.number_input("‚úÖ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•‡∏¥‡∏ï‡∏£‡∏ß‡∏° (‡∏£‡∏ß‡∏° NG)", min_value=0, step=1)
    ok_qty = st.number_input("‚úîÔ∏è OK", min_value=0, step=1)
    ng_qty = st.number_input("‚ùå NG", min_value=0, step=1)

    main_category = st.selectbox("‚è±Ô∏è Downtime Main Category", df_downtime["main_category"].unique() if not df_downtime.empty else [])
    sub_category = st.selectbox("üìå Downtime Sub Category", 
        df_downtime[df_downtime["main_category"]==main_category]["sub_category"].unique() if not df_downtime.empty else [])
    downtime_min = st.number_input("‚è±Ô∏è Downtime (‡∏ô‡∏≤‡∏ó‡∏µ)", min_value=0, step=1)

    problem_4m = st.selectbox("‚ö†Ô∏è ‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏õ‡∏±‡∏ç‡∏´‡∏≤ (4M)", df_problem["problem"].unique() if not df_problem.empty else ["Man","Machine","Material","Method","Other"])
    problem_remark = ""
    if problem_4m == "Other":
        problem_remark = st.text_area("üìù ‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°")

    submitted = st.form_submit_button("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    if submitted:
        try:
            with engine.begin() as conn:
                conn.execute(text("""
                    insert into production_record 
                    (log_date, shift, department, machine_name, part_no, output_qty, ok_qty, ng_qty, 
                    main_category, sub_category, downtime_min, problem_4m, problem_remark, operator) 
                    values (:log_date, :shift, :department, :machine_name, :part_no, :output_qty, :ok_qty, :ng_qty, 
                    :main_category, :sub_category, :downtime_min, :problem_4m, :problem_remark, :operator)
                """), {
                    "log_date": log_date,
                    "shift": shift,
                    "department": department,
                    "machine_name": machine_name,
                    "part_no": part_no,
                    "output_qty": int(output_qty),
                    "ok_qty": int(ok_qty),
                    "ng_qty": int(ng_qty),
                    "main_category": main_category,
                    "sub_category": sub_category,
                    "downtime_min": int(downtime_min),
                    "problem_4m": problem_4m,
                    "problem_remark": problem_remark,
                    "operator": operator
                })
            st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
        except Exception as e:
            st.error(f"‚ùå Error: {e}")

# -------------------------------
# Show latest record
# -------------------------------
st.subheader("üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
try:
    df = pd.read_sql("select * from production_record order by created_at desc limit 10", engine)
    st.dataframe(df, use_container_width=True)
except Exception as e:
    st.warning(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")
