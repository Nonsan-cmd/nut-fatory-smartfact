# app.py

import streamlit as st
from sqlalchemy import create_engine, text
import pandas as pd
from datetime import date
import requests

# -------------------------------
# CONFIG
# -------------------------------
st.set_page_config(page_title="Factory Log System", page_icon="üè≠", layout="wide")

# Connect to Supabase Postgres (‡∏ú‡πà‡∏≤‡∏ô Pooler)
conn_str = st.secrets["postgres"]["conn_str"]
engine = create_engine(conn_str)

# Telegram
TELEGRAM_TOKEN = st.secrets["telegram"]["token"]
TELEGRAM_CHAT_ID = st.secrets["telegram"]["chat_id"]

def send_telegram(msg: str):
    """‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á Telegram"""
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        payload = {"chat_id": TELEGRAM_CHAT_ID, "text": msg}
        requests.post(url, data=payload, timeout=5)
    except Exception as e:
        st.warning(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á Telegram: {e}")

# -------------------------------
# Downtime Master (Main + Sub Category)
# -------------------------------
downtime_structure = {
    "MC Downtime": {"D1": "Breakdown - Major", "D2": "Breakdown - Minor", "D3": "Utility Issue"},
    "Quality Problem": {"Q1": "In-process Defect", "Q2": "QA Problem", "Q3": "Other Quality Problem"},
    "Setup and Adjustment": {"S1": "Tool Change", "S2": "Model Change", "S3": "Adjustment / Trial run"},
    "Management Downtime (PM Plan)": {"M1": "Planned Maintenance", "M2": "Waiting for Plan"},
    "Technical Downtime": {"T1": "Process Instability", "T2": "Tool/Die Problem", "T3": "Waiting Tool"},
    "Other": {"O1": "Material Shortage", "O2": "Waiting / Box", "O3": "Man Issue"},
}

# -------------------------------
# Sidebar Menu
# -------------------------------
menu = st.sidebar.radio("üìå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π", ["Production Record", "Downtime Record"])

# -------------------------------
# Production Record
# -------------------------------
if menu == "Production Record":
    st.title("üìë Production Record")

    with st.form("prod_form", clear_on_submit=True):
        log_date = st.date_input("üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å", value=date.today())
        shift = st.selectbox("üïí ‡∏Å‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô", ["‡πÄ‡∏ä‡πâ‡∏≤", "‡∏ö‡πà‡∏≤‡∏¢", "‡∏î‡∏∂‡∏Å"])
        department = st.selectbox("üè≠ ‡πÅ‡∏ú‡∏ô‡∏Å", ["FM", "TP", "FI"])
        machine_name = st.text_input("‚öôÔ∏è ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£")
        part_no = st.text_input("üî© Part No.")
        output_qty = st.number_input("‚úÖ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•‡∏¥‡∏ï (‡∏ä‡∏¥‡πâ‡∏ô)", min_value=0, step=1)
        ng_qty = st.number_input("‚ùå NG (‡∏ä‡∏¥‡πâ‡∏ô)", min_value=0, step=1)
        downtime_min = st.number_input("‚è±Ô∏è Downtime (‡∏ô‡∏≤‡∏ó‡∏µ)", min_value=0, step=1)
        operator = st.text_input("üë∑ ‡∏ú‡∏π‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")

        submitted = st.form_submit_button("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")
        if submitted:
            try:
                with engine.begin() as conn:
                    conn.execute(text("""
                        insert into production_log 
                        (log_date, shift, department, machine_name, part_no, output_qty, ng_qty, downtime_min, operator) 
                        values (:log_date, :shift, :department, :machine_name, :part_no, :output_qty, :ng_qty, :downtime_min, :operator)
                    """), {
                        "log_date": log_date,
                        "shift": shift,
                        "department": department,
                        "machine_name": machine_name,
                        "part_no": part_no,
                        "output_qty": int(output_qty),
                        "ng_qty": int(ng_qty),
                        "downtime_min": int(downtime_min),
                        "operator": operator
                    })
                st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Production ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

                send_telegram(
                    f"üìë Production Record\n"
                    f"Date: {log_date}\nShift: {shift}\nDept: {department}\nMachine: {machine_name}\nPart: {part_no}\n"
                    f"Output: {output_qty}\nNG: {ng_qty}\nDowntime: {downtime_min} min\nBy: {operator}"
                )
            except Exception as e:
                st.error(f"‚ùå Error: {e}")

    # Show history + Delete
    st.subheader("üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Production ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
    try:
        df = pd.read_sql("select * from production_log order by created_at desc limit 20", engine)
        st.dataframe(df, use_container_width=True)

        with st.expander("üóë ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Production"):
            del_date = st.date_input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö", value=date.today(), key="del_prod")
            if st.button("‚ùå ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Production ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ"):
                with engine.begin() as conn:
                    conn.execute(text("delete from production_log where log_date = :d"), {"d": del_date})
                st.warning(f"‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Production ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {del_date} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
    except Exception as e:
        st.warning(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")

# -------------------------------
# Downtime Record
# -------------------------------
elif menu == "Downtime Record":
    st.title("‚è±Ô∏è Downtime Record")

    with st.form("dt_form", clear_on_submit=True):
        log_date = st.date_input("üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å", value=date.today())
        shift = st.selectbox("üïí ‡∏Å‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô", ["‡πÄ‡∏ä‡πâ‡∏≤", "‡∏ö‡πà‡∏≤‡∏¢", "‡∏î‡∏∂‡∏Å"])
        department = st.selectbox("üè≠ ‡πÅ‡∏ú‡∏ô‡∏Å", ["FM", "TP", "FI"])
        machine_name = st.text_input("‚öôÔ∏è ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£")

        main_category = st.selectbox("üìå Main Category", list(downtime_structure.keys()))
        sub_dict = downtime_structure.get(main_category, {})
        loss_code = st.selectbox("üî¢ Sub Category (Code)", list(sub_dict.keys()))
        sub_category = sub_dict[loss_code]

        downtime_min = st.number_input("‚è±Ô∏è Downtime (‡∏ô‡∏≤‡∏ó‡∏µ)", min_value=0, step=1)
        operator = st.text_input("üë∑ ‡∏ú‡∏π‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")
        remark = st.text_area("üìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏")

        submitted = st.form_submit_button("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")
        if submitted:
            try:
                with engine.begin() as conn:
                    conn.execute(text("""
                        insert into downtime_log 
                        (log_date, shift, department, machine_name, main_category, sub_category, loss_code, downtime_min, operator, remark) 
                        values (:log_date, :shift, :department, :machine_name, :main_category, :sub_category, :loss_code, :downtime_min, :operator, :remark)
                    """), {
                        "log_date": log_date,
                        "shift": shift,
                        "department": department,
                        "machine_name": machine_name,
                        "main_category": main_category,
                        "sub_category": sub_category,
                        "loss_code": loss_code,
                        "downtime_min": int(downtime_min),
                        "operator": operator,
                        "remark": remark
                    })
                st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Downtime ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

                send_telegram(
                    f"‚è±Ô∏è Downtime Record\n"
                    f"Date: {log_date}\nShift: {shift}\nDept: {department}\nMachine: {machine_name}\n"
                    f"Category: {main_category}\nCode: {loss_code} - {sub_category}\n"
                    f"Downtime: {downtime_min} min\nBy: {operator}"
                )
            except Exception as e:
                st.error(f"‚ùå Error: {e}")

    # Show history + Delete
    st.subheader("üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Downtime ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
    try:
        df = pd.read_sql("select * from downtime_log order by created_at desc limit 20", engine)
        st.dataframe(df, use_container_width=True)

        with st.expander("üóë ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Downtime"):
            del_date = st.date_input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö", value=date.today(), key="del_dt")
            if st.button("‚ùå ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Downtime ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ"):
                with engine.begin() as conn:
                    conn.execute(text("delete from downtime_log where log_date = :d"), {"d": del_date})
                st.warning(f"‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Downtime ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {del_date} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
    except Exception as e:
        st.warning(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")
