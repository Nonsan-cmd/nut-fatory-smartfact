import streamlit as st
from sqlalchemy import create_engine, text
import pandas as pd
from datetime import date

# -------------------------------
# CONFIG
# -------------------------------
st.set_page_config(page_title="Production Record", page_icon="üè≠", layout="wide")

# Connect Supabase
conn_str = st.secrets["postgres"]["conn_str"]
engine = create_engine(conn_str)

# -------------------------------
# Login System
# -------------------------------
if "user" not in st.session_state:
    with st.form("login"):
        st.write("üîê Login ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")
        emp_code = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô")
        pw = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", type="password")
        submitted = st.form_submit_button("Login")
        if submitted:
            try:
                query = text("select * from user_roles where emp_code = :emp and password = :pw")
                with engine.begin() as conn:
                    user = conn.execute(query, {"emp": emp_code, "pw": pw}).fetchone()
                if user:
                    st.session_state.user = dict(user._mapping)
                    st.success(f"‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö {user.emp_name} ({user.role})")
                else:
                    st.error("‚ùå ‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
            except Exception as e:
                st.error(f"‚ùå Error: {e}")
    st.stop()

# ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
user = st.session_state.user
operator = user["emp_name"]
operator_code = user["emp_code"]
operator_role = user["role"]
operator_dept = user["department"]

st.sidebar.success(f"üë∑ {operator} ({operator_role})")

# -------------------------------
# Load Master Data
# -------------------------------
def load_master(table):
    try:
        return pd.read_sql(f"select * from {table}", engine)
    except:
        return pd.DataFrame()

df_dept = load_master("department_master")
df_machine = load_master("machine_list")
df_part = load_master("part_master")
df_downtime = load_master("downtime_master")
df_problem = load_master("problem_master")

# -------------------------------
# UI Form
# -------------------------------
st.title("üìë Production Record (with Multiple Downtime)")

if "downtimes" not in st.session_state:
    st.session_state.downtimes = []

with st.form("record_form", clear_on_submit=True):
    log_date = st.date_input("üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô", value=date.today())
    shift = st.selectbox("üïí ‡∏Å‡∏∞", ["‡πÄ‡∏ä‡πâ‡∏≤", "‡πÇ‡∏≠‡∏ó‡∏µ‡πÄ‡∏ä‡πâ‡∏≤", "‡∏î‡∏∂‡∏Å", "‡πÇ‡∏≠‡∏ó‡∏µ‡∏Å‡∏∞‡∏î‡∏∂‡∏Å"])

    # ‚úÖ Department
    dept_selected = st.selectbox(
        "üè≠ ‡πÅ‡∏ú‡∏ô‡∏Å",
        df_dept["department_name"].unique() if not df_dept.empty else ["FM", "TP", "FI"]
    )
    dept_selected = str(dept_selected).strip()

    # ‚úÖ Machine ‡∏ï‡∏≤‡∏° Department
    machine_options = (
        df_machine[df_machine["department"].str.strip() == dept_selected]["machine_name"].unique()
        if not df_machine.empty else []
    )
    machine_name = st.selectbox("‚öôÔ∏è ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£", machine_options)

    # ‚úÖ Part No
    part_no = st.selectbox("üî© Part No.", df_part["part_no"].unique() if not df_part.empty else [])

    # ‚úÖ Output Qty
    ok_qty = st.number_input("‚úîÔ∏è ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô OK", min_value=0, step=1)
    ng_qty = st.number_input("‚ùå ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô NG", min_value=0, step=1)

    untest_qty = 0
    if dept_selected == "FI":
        untest_qty = st.number_input("üîç Untest Qty (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ FI)", min_value=0, step=1)

    # ‚úÖ Problem 4M
    problem_4m = st.selectbox("‚ö†Ô∏è ‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏õ‡∏±‡∏ç‡∏´‡∏≤ (4M)", df_problem["problem"].unique() if not df_problem.empty else ["Man","Machine","Material","Method","Other"])
    problem_remark = ""
    if problem_4m == "Other":
        problem_remark = st.text_area("üìù ‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°")

    # ===============================
    # Downtime Section (‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)
    # ===============================
    st.subheader("‚è±Ô∏è ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Downtime")

    main_category = st.selectbox("Main Category", df_downtime["main_category"].unique() if not df_downtime.empty else [])
    sub_category = st.selectbox("Sub Category", df_downtime[df_downtime["main_category"]==main_category]["sub_category"].unique() if not df_downtime.empty else [])
    minutes = st.number_input("Downtime (‡∏ô‡∏≤‡∏ó‡∏µ)", min_value=0, step=1)

    if st.form_submit_button("‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏° Downtime"):
        st.session_state.downtimes.append({
            "main": main_category,
            "sub": sub_category,
            "minutes": minutes
        })

    if st.session_state.downtimes:
        st.table(st.session_state.downtimes)

    # ===============================
    # Submit All
    # ===============================
    submitted = st.form_submit_button("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    if submitted:
        try:
            with engine.begin() as conn:
                # insert production record
                result = conn.execute(text("""
                    insert into production_record
                    (log_date, shift, department, machine_name, part_no, ok_qty, ng_qty, untest_qty,
                    problem_4m, problem_remark, emp_code, operator)
                    values (:log_date, :shift, :department, :machine_name, :part_no, :ok_qty, :ng_qty, :untest_qty,
                    :problem_4m, :problem_remark, :emp_code, :operator)
                    returning id
                """), {
                    "log_date": log_date,
                    "shift": shift,
                    "department": dept_selected,
                    "machine_name": machine_name,
                    "part_no": part_no,
                    "ok_qty": int(ok_qty),
                    "ng_qty": int(ng_qty),
                    "untest_qty": int(untest_qty),
                    "problem_4m": problem_4m,
                    "problem_remark": problem_remark,
                    "emp_code": operator_code,
                    "operator": operator
                })
                prod_id = result.scalar_one()

                # insert downtime logs
                for dt in st.session_state.downtimes:
                    conn.execute(text("""
                        insert into downtime_log (production_id, main_category, loss_code, sub_category, downtime_min)
                        values (:pid, :main, 
                               (select loss_code from downtime_master where sub_category=:sub limit 1), 
                               :sub, :minutes)
                    """), {
                        "pid": prod_id,
                        "main": dt["main"],
                        "sub": dt["sub"],
                        "minutes": int(dt["minutes"])
                    })

            st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
            st.session_state.downtimes = []  # reset ‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        except Exception as e:
            st.error(f"‚ùå Error: {e}")

# -------------------------------
# Show latest record
# -------------------------------
st.subheader("üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
try:
    df = pd.read_sql("""
        select pr.id, pr.log_date, pr.shift, pr.department, pr.machine_name, pr.part_no,
               pr.ok_qty, pr.ng_qty, pr.untest_qty, pr.output_qty, pr.operator,
               dt.main_category, dt.sub_category, dt.downtime_min
        from production_record pr
        left join downtime_log dt on pr.id = dt.production_id
        order by pr.created_at desc
        limit 20
    """, engine)
    st.dataframe(df, use_container_width=True)
except Exception as e:
    st.warning(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")
