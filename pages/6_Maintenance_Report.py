# 6_Maintenance_Report.py
import streamlit as st
import pandas as pd
import psycopg2
from datetime import datetime, timedelta
import pytz

# === Config ===
tz = pytz.timezone("Asia/Bangkok")

# === Connection ===
def get_connection():
    return psycopg2.connect(st.secrets["postgres"]["conn_str"])

# === Add New Repair Request ===
def insert_repair(log_date, shift, department, machine_name, issue, reporter):
    with get_connection() as conn:
        cur = conn.cursor()
        cur.execute("""
            INSERT INTO maintenance_log 
            (log_date, shift, department, machine_name, issue, reporter, status, created_at)
            VALUES (%s, %s, %s, %s, %s, %s, 'Pending', %s)
        """, (log_date, shift, department, machine_name, issue, reporter, datetime.now(tz)))
        conn.commit()

# === Assign Job ===
def assign_job(job_id, assignee):
    with get_connection() as conn:
        cur = conn.cursor()
        cur.execute("""
            UPDATE maintenance_log SET status = 'Assigned', assignee = %s WHERE id = %s
        """, (assignee, job_id))
        conn.commit()

# === Complete Job ===
def complete_job(job_id):
    with get_connection() as conn:
        cur = conn.cursor()
        cur.execute("""
            UPDATE maintenance_log SET status = 'Completed', completed_at = %s WHERE id = %s
        """, (datetime.now(tz), job_id))
        conn.commit()

# === Load Repair Data ===
def load_repairs():
    with get_connection() as conn:
        return pd.read_sql("SELECT * FROM maintenance_log ORDER BY created_at DESC", conn)

# === UI ===
st.title("üõ† Maintenance Report")

tab1, tab2 = st.tabs(["üì© ‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°", "üìã ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô / ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô"])

with tab1:
    st.subheader("üì© ‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°‡πÉ‡∏´‡∏°‡πà")
    with st.form("repair_form", clear_on_submit=True):
        col1, col2 = st.columns(2)
        with col1:
            log_date = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°", datetime.now(tz).date())
            shift = st.selectbox("‡∏Å‡∏∞", ["Day", "Night"])
            department = st.selectbox("‡πÅ‡∏ú‡∏ô‡∏Å", ["Forming", "Tapping", "Final", "Outsource", "Warehouse"])
        with col2:
            machine_name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£")
            issue = st.text_area("‡∏õ‡∏±‡∏ç‡∏´‡∏≤")
            reporter = st.text_input("‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á")
        submitted = st.form_submit_button("üì® ‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°")
        if submitted:
            insert_repair(log_date, shift, department, machine_name, issue, reporter)
            st.success("‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

with tab2:
    st.subheader("üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
    df = load_repairs()
    status_filter = st.selectbox("‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "Pending", "Assigned", "Completed"])
    if status_filter != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
        df = df[df["status"] == status_filter]

    st.dataframe(df)

    st.markdown("### üõ† ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£")
    for idx, row in df.iterrows():
        with st.expander(f"[{row['status']}] ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á {row['machine_name']} - {row['issue']}"):
            st.text(f"‡πÅ‡∏à‡πâ‡∏á‡πÇ‡∏î‡∏¢: {row['reporter']} | ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {row['log_date']} ‡∏Å‡∏∞: {row['shift']}")
            if row["status"] == "Pending":
                assignee = st.text_input(f"‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡πÉ‡∏Ñ‡∏£ (‡∏á‡∏≤‡∏ô #{row['id']})", key=f"assign_{row['id']}")
                if st.button("‚úÖ Assign", key=f"btn_assign_{row['id']}"):
                    assign_job(row["id"], assignee)
                    st.success("‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
                    st.rerun()
            elif row["status"] == "Assigned":
                if st.button("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏°‡πÄ‡∏™‡∏£‡πá‡∏à", key=f"btn_complete_{row['id']}"):
                    complete_job(row["id"])
                    st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏°‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß")
                    st.rerun()

# === Summary Count for Dashboard ===
pending_count = df[df["status"] != "Completed"].shape[0]
completed_count = df[df["status"] == "Completed"].shape[0]
st.sidebar.metric("üîß ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏á‡∏Ñ‡πâ‡∏≤‡∏á", pending_count)
st.sidebar.metric("‚úÖ ‡∏ã‡πà‡∏≠‡∏°‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß", completed_count)
