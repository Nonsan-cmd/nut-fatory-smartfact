import streamlit as st
import psycopg2
from datetime import datetime
import pandas as pd

# === Setup ===
st.set_page_config(page_title="‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Downtime", layout="centered")
st.title("üõ†Ô∏è ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Downtime")

# === Database Connection ===
def get_connection():
    return psycopg2.connect(st.secrets["postgres"]["conn_str"])

# === Load Master Data ===
@st.cache_data(ttl=600)
def load_machines():
    with get_connection() as conn:
        return pd.read_sql("SELECT id, machine_name, department FROM machine_list ORDER BY machine_name", conn)

@st.cache_data(ttl=600)
def load_reasons():
    with get_connection() as conn:
        return pd.read_sql("SELECT id, reason_name FROM downtime_reason_master ORDER BY reason_name", conn)

# === Form UI ===
machine_df = load_machines()
reason_df = load_reasons()

department = st.selectbox("‡πÅ‡∏ú‡∏ô‡∏Å", sorted(machine_df["department"].unique()))
log_date = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", datetime.today())
reason_name = st.selectbox("‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏ Downtime", reason_df["reason_name"])
shift = st.selectbox("‡∏Å‡∏∞", ["Day", "Night"])
duration_min = st.number_input("‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ (‡∏ô‡∏≤‡∏ó‡∏µ)", min_value=0, step=1, value=0)
machine_label = st.selectbox("‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£", machine_df[machine_df["department"] == department]["machine_name"])
operator_name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏Å‡∏£‡∏≠‡∏Å")

# === Save Function ===
def save_downtime():
    machine_row = machine_df[machine_df["machine_name"] == machine_label].iloc[0]
    reason_row = reason_df[reason_df["reason_name"] == reason_name].iloc[0]

    data = {
        "log_date": str(log_date),
        "department": department,
        "shift": shift,
        "machine_id": int(machine_row["id"]),
        "downtime_reason_id": int(reason_row["id"]),
        "duration_min": int(duration_min),
        "operator_name": operator_name
    }

    try:
        with get_connection() as conn:
            cur = conn.cursor()
            cur.execute("""
                INSERT INTO downtime_log (log_date, department, shift, machine_id, downtime_reason_id, duration_min, operator_name)
                VALUES (%s, %s, %s, %s, %s, %s, %s)
            """, tuple(data.values()))
            conn.commit()
            st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Downtime ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß")
    except Exception as e:
        st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

# === Submit Button ===
if st.button("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Downtime", use_container_width=True):
    if not operator_name:
        st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")
    elif duration_min <= 0:
        st.warning("‚ö†Ô∏è ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0 ‡∏ô‡∏≤‡∏ó‡∏µ")
    else:
        save_downtime()
