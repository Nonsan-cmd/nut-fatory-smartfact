import streamlit as st
import pandas as pd
import psycopg2
import io
from datetime import datetime

# === Database Connection ===
def get_connection():
    return psycopg2.connect(st.secrets["postgres"]["conn_str"])

st.set_page_config(page_title="Upload Production", layout="wide")
st.title("üì§ Upload Production Record")

uploaded_file = st.file_uploader("üìÇ Upload Excel File (.xlsx)", type="xlsx")

# ---- helper: ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏´‡πâ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏ï‡πà‡∏≠ INTEGER ----
INT32_MAX = 2_147_483_647
def clean_int_series(s, default=0):
    s = pd.to_numeric(s, errors="coerce").fillna(default)
    # ‡∏ï‡∏±‡∏î‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á int32
    s = s.clip(lower=0, upper=INT32_MAX).astype("int64")
    return s

if uploaded_file:
    try:
        xls = pd.ExcelFile(uploaded_file)
        all_data = []

        # ‡πÇ‡∏´‡∏•‡∏î master ‡∏à‡∏≤‡∏Å DB ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå id ‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡∏ä‡∏ô‡∏Å‡∏±‡∏ô‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ï‡πâ‡∏ô
        with get_connection() as conn:
            machine_df = pd.read_sql(
                "SELECT id AS machine_id, machine_name FROM machine_list",
                conn
            )
            part_df = pd.read_sql(
                "SELECT id AS part_id, part_no FROM part_master",
                conn
            )

        for sheet in xls.sheet_names:
            df = pd.read_excel(xls, sheet_name=sheet, dtype=str)  # ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô string ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            # ‡∏´‡∏≤ column ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å 'log_date'
            if "log_date" not in df.columns:
                st.warning(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'log_date' ‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó {sheet}")
                continue

            # ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏£‡∏ö
            # ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ: log_date, shift, department, machine_name, part_no, plan_qty, actual_qty, defect_qty, created_by, remark
            needed = ["log_date", "shift", "department", "machine_name", "part_no",
                      "plan_qty", "actual_qty", "defect_qty", "created_by", "remark"]
            for c in needed:
                if c not in df.columns:
                    df[c] = None  # ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ

            # ‡∏ï‡∏±‡∏î‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ
            df = df[needed].copy()

            # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
            df["log_date"] = pd.to_datetime(df["log_date"], errors="coerce").dt.date
            df["shift"] = df["shift"].fillna("").str.strip()
            df["department"] = df["department"].fillna("").str.strip()
            df["machine_name"] = df["machine_name"].fillna("").str.strip()
            df["part_no"] = df["part_no"].fillna("").str.strip()
            df["created_by"] = df["created_by"].fillna("").str.strip()
            df["remark"] = df["remark"].fillna("").astype(str)

            # ‡∏Å‡∏£‡∏≠‡∏á record ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà/‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á/part
            df = df.dropna(subset=["log_date"])
            df = df[df["machine_name"] != ""]
            df = df[df["part_no"] != ""]

            # map machine_id / part_id
            df = df.merge(machine_df, how="left", on="machine_name")
            df = df.merge(part_df, how="left", on="part_no")

            # ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏´‡∏≤ id ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠
            miss_m = df[df["machine_id"].isna()]
            miss_p = df[df["part_id"].isna()]
            if not miss_m.empty:
                st.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {sorted(miss_m['machine_name'].unique())}")
            if not miss_p.empty:
                st.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö Part No. ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {sorted(miss_p['part_no'].unique())}")

            df = df.dropna(subset=["machine_id", "part_id"]).copy()

            # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
            df["plan_qty"] = clean_int_series(df["plan_qty"])
            df["actual_qty"] = clean_int_series(df["actual_qty"])
            df["defect_qty"] = clean_int_series(df["defect_qty"])

            # ‡∏ï‡∏±‡∏ß‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ß‡∏•‡∏≤
            df["created_at"] = datetime.now()

            all_data.append(df)

        if not all_data:
            st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î")
            st.stop()

        df_upload = pd.concat(all_data, ignore_index=True)

        # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
        st.subheader("‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î")
        st.dataframe(df_upload.head(100), use_container_width=True)

        # ‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
        if st.button("üì• Upload to Database"):
            # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö insert
            rows = []
            for _, r in df_upload.iterrows():
                rows.append((
                    r["log_date"],             # DATE
                    r["shift"],                # TEXT
                    r["department"],           # TEXT
                    int(r["machine_id"]),      # INTEGER
                    int(r["part_id"]),         # INTEGER
                    int(r["plan_qty"]),        # INTEGER
                    int(r["actual_qty"]),      # INTEGER
                    int(r["defect_qty"]),      # INTEGER
                    r["created_by"],           # TEXT
                    r["created_at"],           # TIMESTAMP
                    r["remark"]                # TEXT
                ))

            try:
                with get_connection() as conn:
                    cur = conn.cursor()
                    cur.executemany(
                        """
                        INSERT INTO production_log
                        (log_date, shift, department, machine_id, part_id,
                         plan_qty, actual_qty, defect_qty, created_by, created_at, remark)
                        VALUES
                        (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
                        """,
                        rows
                    )
                    conn.commit()
                st.success(f"‚úÖ Upload ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå ({len(rows)} ‡πÅ‡∏ñ‡∏ß)")
            except Exception as e:
                # ‡∏à‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏•‡πà‡∏´‡∏≤‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏á
                st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: {e}")
                st.info("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤...")
                bad = []
                with get_connection() as conn:
                    cur = conn.cursor()
                    for i, vals in enumerate(rows, start=1):
                        try:
                            cur.execute(
                                """
                                INSERT INTO production_log
                                (log_date, shift, department, machine_id, part_id,
                                 plan_qty, actual_qty, defect_qty, created_by, created_at, remark)
                                VALUES
                                (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
                                """,
                                vals
                            )
                        except Exception as e2:
                            bad.append((i, vals, str(e2)))
                            conn.rollback()
                        else:
                            conn.rollback()  # dry-run ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
                if bad:
                    st.error(f"‡∏û‡∏ö‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ {len(bad)} ‡πÅ‡∏ñ‡∏ß (‡πÅ‡∏™‡∏î‡∏á 5 ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å):")
                    for i, vals, msg in bad[:5]:
                        st.write(f"‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà {i}: {vals} -> {msg}")

    except Exception as e:
        st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel ‡πÑ‡∏î‡πâ: {e}")
else:
    st.info("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: log_date, shift, department, machine_name, part_no, plan_qty, actual_qty, defect_qty, created_by, remark")
