import streamlit as st
import pandas as pd
import psycopg2
from datetime import datetime

# === DB Connection ===
def get_connection():
    return psycopg2.connect(st.secrets["postgres"]["conn_str"])

# === ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Supabase ===
@st.cache_data
def get_machines_df():
    with get_connection() as conn:
        return pd.read_sql("SELECT id AS machine_id, machine_name FROM machine_list WHERE is_active = TRUE", conn)

@st.cache_data
def get_parts_df():
    with get_connection() as conn:
        return pd.read_sql("SELECT id AS part_id, part_no FROM part_master WHERE is_active = TRUE", conn)

# === Insert ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô ===
def insert_batch_to_production_log(df):
    with get_connection() as conn:
        cur = conn.cursor()
        for _, row in df.iterrows():
            sql = """
                INSERT INTO production_log
                (log_date, shift, department, machine_id, part_id, plan_qty, actual_qty, defect_qty, remark, created_by, created_at)
                VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)
            """
            values = (
                row["log_date"], row["shift"], row["department"],
                int(row["machine_id"]), int(row["part_id"]),
                int(row["plan_qty"]), int(row["actual_qty"]), int(row["defect_qty"]),
                row.get("remark", ""), row["created_by"], datetime.now()
            )
            cur.execute(sql, values)
        conn.commit()

# === UI ‡πÄ‡∏£‡∏¥‡πà‡∏° ===
st.title("üì§ Upload Production Log")

uploaded_file = st.file_uploader("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏á‡∏≤‡∏ô Production (.xlsx)", type=["xlsx"])

if uploaded_file:
    try:
        df = pd.read_excel(uploaded_file)

        st.write("üìÑ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î:")
        st.dataframe(df)

        required_columns = ["log_date", "shift", "department", "machine_name", "part_no",
                            "plan_qty", "actual_qty", "defect_qty", "created_by"]
        if not all(col in df.columns for col in required_columns):
            st.error(f"‚ùå ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ: {', '.join(required_columns)}")
        else:
            # ‡πÇ‡∏´‡∏•‡∏î Mapping
            machines_df = get_machines_df()
            parts_df = get_parts_df()

            # Mapping machine_id
            df = df.merge(machines_df, how="left", on="machine_name")
            df = df.merge(parts_df, how="left", on="part_no")

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ map ‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏ö‡πÑ‡∏´‡∏°
            if df["machine_id"].isnull().any():
                st.error("‚ùå ‡∏°‡∏µ machine_name ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö")
            elif df["part_id"].isnull().any():
                st.error("‚ùå ‡∏°‡∏µ part_no ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö")
            else:
                if st.button("‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤ Database"):
                    insert_batch_to_production_log(df)
                    st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")

    except Exception as e:
        st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
